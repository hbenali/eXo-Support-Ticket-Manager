package gui;

import entity.Ticket;
import io.AvatarManager;
import io.BasicUtils;
import io.OnlineTicketManager;
import java.awt.Desktop;
import java.net.URI;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author hba19
 */
public class AvailableTickets extends javax.swing.JFrame {

    private int lscount = -1;
    private Main m;
    private DefaultTableModel model;

    /**
     * Creates new form AvailableTickets
     */
    public AvailableTickets(Main m) {
        initComponents();
        javtable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        this.m = m;
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.setIconImage(AvatarManager.getAvatar());
        try {
            loadTck();
        } catch (Exception ff) {
            // JOptionPane.showMessageDialog(this, "Could not connect to server ! Please try later", "Service Unavailable", JOptionPane.WARNING_MESSAGE);
            Tray.displayWarn("Could not connect to server ! Please try later");

        }

        check();
    }

    private void check() {
        int delay = 60000;   // delay for 5 sec.
        int period = 60000;  // repeat every sec.
        Timer timer = new Timer();

        timer.scheduleAtFixedRate(new TimerTask() {
            public void run() {
                try {
                    loadTck();
                } catch (Exception ff) {
                }
            }
        }, delay, period);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        javtable = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        exit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        visit = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        assignBtn = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Available Tickets");

        javtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Title", "Status", "Created", "Creator"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        javtable.setUpdateSelectionOnSort(false);
        jScrollPane1.setViewportView(javtable);
        if (javtable.getColumnModel().getColumnCount() > 0) {
            javtable.getColumnModel().getColumn(0).setResizable(false);
            javtable.getColumnModel().getColumn(2).setResizable(false);
            javtable.getColumnModel().getColumn(3).setResizable(false);
            javtable.getColumnModel().getColumn(4).setResizable(false);
        }

        jMenu1.setText("File");

        exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/exit.png"))); // NOI18N
        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        jMenu1.add(exit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        visit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        visit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/internet.png"))); // NOI18N
        visit.setText("Visit");
        visit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visitActionPerformed(evt);
            }
        });
        jMenu2.add(visit);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/reset.png"))); // NOI18N
        jMenuItem1.setText("Reload");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        assignBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        assignBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assign.png"))); // NOI18N
        assignBtn.setText("Assign");
        assignBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignBtnActionPerformed(evt);
            }
        });
        jMenu2.add(assignBtn);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 814, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_exitActionPerformed

    private void visitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visitActionPerformed
        // TODO add your handling code here:
        String url = "https://community.exoplatform.com/portal/support/";
        int t[] = javtable.getSelectedRows();
        for (int pos : t) {
            String name = (String) javtable.getModel().getValueAt(pos, 0);
            try {
                Desktop.getDesktop().browse(new URI(url + name));
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_visitActionPerformed


    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        try {
            this.loadTck();
        } catch (Exception ef) {
            JOptionPane.showMessageDialog(this, "Could not connect to server ! Please try later", "Service Unavailable", JOptionPane.WARNING_MESSAGE);
            Tray.displayWarn("Could not connect to server ! Please try later");
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void assignBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignBtnActionPerformed
        // TODO add your handling code here:
        int t[] = javtable.getSelectedRows();
        for (int pos : t) {
            String name = (String) javtable.getModel().getValueAt(pos, 0);
            m.ls.addTicket(new Ticket(name, m.ls.getOwner()), true);
        }
        m.updateCount();
        m.controller();
    }//GEN-LAST:event_assignBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AvailableTickets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AvailableTickets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AvailableTickets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AvailableTickets.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AvailableTickets(null).setVisible(true);
            }
        });
    }

    public void loadTck() throws Exception {
        String[] avtickets = OnlineTicketManager.getAvTickets();
        if (avtickets == null) {
            return;
        }
        model = model != null ? model : (DefaultTableModel) javtable.getModel();
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
        if (lscount > 0 && avtickets != null && avtickets.length > lscount) {
            if (avtickets.length == 1) {
                String tmp[] = avtickets[0].split("\\|");
                Tray.displayInfo("New Ticket: [" + tmp[0] + "] has been arrived!");
            } else //JOptionPane.showMessageDialog(this, "New Available Tickets has been arrived!", "New Available Tickets!", JOptionPane.INFORMATION_MESSAGE);
            {
                Tray.displayInfo("New Available Tickets has been arrived!");
            }
        }
        lscount = avtickets != null ? avtickets.length : lscount;
        System.out.println(lscount);
        if (lscount > 0) {
            this.setTitle(lscount + " Available Ticket" + (lscount > 1 ? "s" : ""));
        } else {
            this.setTitle("No Available Tickets");
        }
        for (int i = 0; i < avtickets.length; i++) {
            String tmp[] = avtickets[i].split("\\|");
            model.addRow(new Object[]{tmp[0], tmp[3].replace("&#39;", "'").replace("&#34;", "\""), BasicUtils.formatName(tmp[1]), tmp[2], tmp[4]});
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem assignBtn;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable javtable;
    private javax.swing.JMenuItem visit;
    // End of variables declaration//GEN-END:variables
}
